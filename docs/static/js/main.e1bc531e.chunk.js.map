{"version":3,"sources":["components/Hello.js","App.js","index.js","config.js"],"names":["Hello","contract","useState","text","setText","useEffect","say_hi","then","console","log","App","currentUser","nearConfig","wallet","accountId","onClick","signOut","window","location","replace","origin","pathname","requestSignIn","contractName","a","getConfig","process","nearAPI","deps","keyStore","BrowserLocalStorageKeyStore","near","walletConnection","getAccountId","account","state","amount","balance","viewMethods","changeMethods","sender","nearInitPromise","initContract","ReactDOM","render","document","getElementById","CONTRACT_NAME","module","exports","env","networkId","nodeUrl","walletUrl","helperUrl","Error"],"mappings":"2NA0BeA,MAtBR,YAA6B,IAAZC,EAAW,EAAXA,SAEpB,EAAuBC,mBAAS,IAAhC,mBAAOC,EAAP,KAAYC,EAAZ,KAWF,OAREC,qBAAU,WAENJ,EAASK,OAAO,CAAC,SAAW,KAAKC,MAAK,SAAAJ,GAClCC,EAAQD,QACX,IAEHK,QAAQC,IAAIN,GAGd,mCACE,4BACGA,OC8CMO,EA7DH,SAAC,GAAmD,IAAjDT,EAAgD,EAAhDA,SAAUU,EAAsC,EAAtCA,YAAaC,EAAyB,EAAzBA,WAAYC,EAAa,EAAbA,OAahD,OACE,qCACE,sDACEF,EACI,gCACE,8CACeA,EAAYG,UACxB,IACD,wBAAQC,QAZN,WACdF,EAAOG,UACPC,OAAOC,SAASC,QAAQF,OAAOC,SAASE,OAASH,OAAOC,SAASG,WAUrD,wBAOF,cAAC,EAAD,CAAOpB,SAAUA,OAGrB,0DAEG,IACD,wBAAQc,QAhCH,WACbF,EAAOS,cACLV,EAAWW,aACX,wBA6BM,2B,qEChCZ,oCAAAC,EAAA,6DACQZ,EAAaa,IAAUC,cAD/B,SAIqBC,UAAA,aACjBC,KAAM,CACJC,SAAU,IAAIF,YAAkBG,8BAE/BlB,IARP,UAIQmB,EAJR,SAYQC,EAAmB,IAAIL,mBAAyBI,IAIlCE,eAhBtB,6BAkBiBD,EAAiBC,eAlBlC,SAmBsBD,EAAiBE,UAAUC,QAnBjD,mBAmB0DC,OAFtDzB,EAjBJ,CAkBMG,UAlBN,KAmBMuB,QAnBN,+BAwByB,IAAIV,WAAiBK,EAAiBE,UAAWtB,EAAWW,aAAc,CAE/Fe,YAAa,CAAC,WAEdC,cAAe,CAAC,UAGhBC,OAAQR,EAAiBC,iBA/B7B,eAwBQhC,EAxBR,yBAkCS,CAAEA,WAAUU,cAAaC,aAAYoB,qBAlC9C,6C,sBAqCAf,OAAOwB,gB,0CAAkBC,GACtBnC,MAAK,YAA8D,IAA3DN,EAA0D,EAA1DA,SAAUU,EAAgD,EAAhDA,YAAaC,EAAmC,EAAnCA,WAAYoB,EAAuB,EAAvBA,iBAC1CW,IAASC,OACP,cAAC,EAAD,CACE3C,SAAUA,EACVU,YAAaA,EACbC,WAAYA,EACZC,OAAQmB,IAEVa,SAASC,eAAe,a,iBCrD9B,IAAMC,EAAgBrB,mIAAYqB,eAAiB,mCA8BnDC,EAAOC,QA5BP,SAAmBC,GACjB,OAAOA,GACL,IAAK,UACH,MAAO,CACLC,UAAW,UACXC,QAAS,+BACT7B,aAAcwB,EACdM,UAAW,0BACXC,UAAW,mCAIf,IAAK,aACL,IAAK,cACL,IAAK,UACH,MAAO,CACLH,UAAW,UACXC,QAAS,+BACT7B,aAAcwB,EACdM,UAAW,kCACXC,UAAW,mCAEf,QACE,MAAMC,MAAM,6BAAD,OAA8BL,EAA9B,8C","file":"static/js/main.e1bc531e.chunk.js","sourcesContent":["// import { useState } from \"react\";\n\nimport { useState,useEffect } from \"react\";\n\nexport function Hello({ contract}) {\n\n    const [text,setText] = useState([]);\n\n\n    useEffect(() => {\n        // TODO: don't just fetch once; subscribe!\n        contract.say_hi({\"arg_name\":\"\"}).then(text => {\n            setText(text)});\n      }, []);\n\n      console.log(text);\n\n  return (\n    <>\n      <p>\n        {text} \n      </p>\n    </>\n  );\n}\n\nexport default Hello;","import 'regenerator-runtime/runtime';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Hello from './components/Hello.js';\n\nconst App = ({ contract, currentUser, nearConfig, wallet }) => {\n\n  const signIn = () => {\n    wallet.requestSignIn(\n      nearConfig.contractName,\n      'NEAR Hello World FE'\n    );\n  };\n\n  const signOut = () => {\n    wallet.signOut();\n    window.location.replace(window.location.origin + window.location.pathname);\n  };\n  return (\n    <>\n      <h1>NEAR Hello World App</h1>\n      { currentUser\n          ? <div>\n              <h2>\n                Account ID: {currentUser.accountId}\n                {\" \"}\n                <button onClick={signOut}>Log out</button>\n              </h2>\n              \n              {/* <CreateTodo contract={contract} />\n              <TodoList contract={contract} /> */}\n\n\n              <Hello contract={contract} />\n            </div>\n          : \n          <div>\n            Sign In To Use The App: \n            {\" \"}\n            <button onClick={signIn}>Log in</button>\n          </div>\n        }\n    </>\n  );\n};\n\nApp.propTypes = {\n  contract: PropTypes.shape({\n    say_hi: PropTypes.func.isRequired,\n    // get: PropTypes.func.isRequired,\n    // update: PropTypes.func.isRequired,\n    // del: PropTypes.func.isRequired,\n  }).isRequired,\n  currentUser: PropTypes.shape({\n    accountId: PropTypes.string.isRequired,\n    balance: PropTypes.string.isRequired\n  }),\n  nearConfig: PropTypes.shape({\n    contractName: PropTypes.string.isRequired\n  }).isRequired,\n  wallet: PropTypes.shape({\n    requestSignIn: PropTypes.func.isRequired,\n    signOut: PropTypes.func.isRequired\n  }).isRequired\n};\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport getConfig from './config.js';\nimport * as nearAPI from 'near-api-js';\n\n// Initializing contract\nasync function initContract() {\n  const nearConfig = getConfig(process.env.NODE_ENV || 'testnet');\n\n  // Initializing connection to the NEAR TestNet\n  const near = await nearAPI.connect({\n    deps: {\n      keyStore: new nearAPI.keyStores.BrowserLocalStorageKeyStore()\n    },\n    ...nearConfig\n  });\n\n  // Needed to access wallet\n  const walletConnection = new nearAPI.WalletConnection(near);\n\n  // Load in account data\n  let currentUser;\n  if(walletConnection.getAccountId()) {\n    currentUser = {\n      accountId: walletConnection.getAccountId(),\n      balance: (await walletConnection.account().state()).amount\n    };\n  }\n\n  // Initializing our contract APIs by contract name and configuration\n  const contract = await new nearAPI.Contract(walletConnection.account(), nearConfig.contractName, {\n    // View methods are read-only â€“ they don't modify the state, but usually return some value\n    viewMethods: [\"get_num\"],\n    // Change methods can modify the state, but you don't receive the returned value when called\n    changeMethods: [\"say_hi\"],\n    // Sender is the account ID to initialize transactions.\n    // getAccountId() will return empty string if user is still unauthorized\n    sender: walletConnection.getAccountId()\n  });\n\n  return { contract, currentUser, nearConfig, walletConnection };\n}\n\nwindow.nearInitPromise = initContract()\n  .then(({ contract, currentUser, nearConfig, walletConnection }) => {\n    ReactDOM.render(\n      <App\n        contract={contract}\n        currentUser={currentUser}\n        nearConfig={nearConfig}\n        wallet={walletConnection}\n      />,\n      document.getElementById('root')\n    );\n  });","const CONTRACT_NAME = process.env.CONTRACT_NAME || 'dev-1637245754068-81836000795693';\n\nfunction getConfig(env) {\n  switch(env) {\n    case 'mainnet':\n      return {\n        networkId: 'mainnet',\n        nodeUrl: 'https://rpc.mainnet.near.org',\n        contractName: CONTRACT_NAME,\n        walletUrl: 'https://wallet.near.org',\n        helperUrl: 'https://helper.mainnet.near.org'\n      };\n    // This is an example app so production is set to testnet.\n    // You can move production to mainnet if that is applicable.\n    case 'production':\n    case 'development':\n    case 'testnet':\n      return {\n        networkId: 'testnet',\n        nodeUrl: 'https://rpc.testnet.near.org',\n        contractName: CONTRACT_NAME,\n        walletUrl: 'https://wallet.testnet.near.org',\n        helperUrl: 'https://helper.testnet.near.org'\n      };\n    default:\n      throw Error(`Unconfigured environment '${env}'. Can be configured in src/config.js.`);\n  }\n}\n\n\nmodule.exports = getConfig;"],"sourceRoot":""}